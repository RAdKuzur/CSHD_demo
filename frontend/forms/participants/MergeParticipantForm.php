<?php

namespace frontend\forms\participants;


use common\events\EventTrait;
use common\helpers\DateFormatter;
use common\repositories\act_participant\SquadParticipantRepository;
use common\repositories\dictionaries\ForeignEventParticipantsRepository;
use common\repositories\dictionaries\PersonalDataParticipantRepository;
use common\repositories\educational\TeacherGroupRepository;
use common\repositories\educational\TrainingGroupParticipantRepository;
use common\repositories\educational\TrainingGroupRepository;
use common\repositories\educational\VisitRepository;
use common\repositories\event\ParticipantAchievementRepository;
use frontend\models\work\dictionaries\ForeignEventParticipantsWork;
use frontend\models\work\dictionaries\PersonalDataParticipantWork;
use frontend\models\work\educational\journal\VisitWork;
use frontend\models\work\educational\training_group\TrainingGroupParticipantWork;
use frontend\models\work\team\SquadParticipantWork;
use Yii;

class MergeParticipantForm extends \yii\base\Model
{
    use EventTrait;

    public $fio1;
    public $fio2;
    public $id1;
    public $id2;

    public $firstname;
    public $surname;
    public $patronymic;
    public $sex;
    public $pd = [];

    public $targetId;
    public MergeParticipantFormData $data;

    public ForeignEventParticipantsWork $editModel;

    private ForeignEventParticipantsRepository $participantRepository;
    private TrainingGroupParticipantRepository $participantGroupRepository;
    private TeacherGroupRepository $teacherGroupRepository;
    private ParticipantAchievementRepository $participantAchievementRepository;
    private VisitRepository $visitRepository;
    private SquadParticipantRepository $squadRepository;
    private PersonalDataParticipantRepository $personalDataParticipantRepository;


    public function __construct(
        ForeignEventParticipantsRepository $participantRepository,
        TrainingGroupParticipantRepository $participantGroupRepository,
        TeacherGroupRepository $teacherGroupRepository,
        ParticipantAchievementRepository $participantAchievementRepository,
        VisitRepository $visitRepository,
        SquadParticipantRepository $squadRepository,
        PersonalDataParticipantRepository $personalDataParticipantRepository,
        $config = []
    )
    {
        parent::__construct($config);
        $this->participantRepository = $participantRepository;
        $this->participantGroupRepository = $participantGroupRepository;
        $this->teacherGroupRepository = $teacherGroupRepository;
        $this->participantAchievementRepository = $participantAchievementRepository;
        $this->visitRepository = $visitRepository;
        $this->squadRepository = $squadRepository;
        $this->personalDataParticipantRepository = $personalDataParticipantRepository;

        $this->editModel = Yii::createObject(ForeignEventParticipantsWork::class);
        $this->data = new MergeParticipantFormData(
            $this->participantRepository->getParticipantsForMerge(),
        );
    }

    public function rules()
    {
        return [
            [['firstname', 'surname', 'patronymic', 'fio1', 'fio2'], 'string'],
            [['pd', 'editModel'], 'safe'],
            [['sex', 'targetId', 'id1', 'id2', 'guaranted_true'], 'integer'],
        ];
    }

    public function beforeValidate()
    {
        $this->editModel->birthdate = DateFormatter::format($this->editModel->birthdate, DateFormatter::dmY_dot, DateFormatter::Ymd_dash);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function save()
    {
        //меняем все связи второго участника на первого
        $this->changeRelations();

        //сохраняем данные по первому участнику
        $this->changeParticipantData();

        //удаляем и перезаписываем разрешение на разглашение ПД участника
        $this->changePersonalData();

        //удаляем второго участника
        $this->participantRepository->delete(
            $this->participantRepository->get($this->id2)
        );
    }

    private function changeRelations()
    {
        $groupParticipants = $this->participantGroupRepository->getByParticipantIds([$this->id2]);
        foreach ($groupParticipants as $participant) {
            /** @var TrainingGroupParticipantWork $participant */
            $participant->setParticipantId($this->id1);
            $this->participantGroupRepository->save($participant);
        }

        $squads = $this->squadRepository->getAllByParticipantId($this->id2);
        foreach ($squads as $squad) {
            /** @var SquadParticipantWork $squad */
            $squad->setParticipantId($this->id1);
            $this->squadRepository->save($squad);
        }
    }

    private function changeParticipantData()
    {
        /** @var ForeignEventParticipantsWork $part */
        $part = $this->participantRepository->get($this->id1);
        $part->setProperties(
            $this->editModel->firstname,
            $this->editModel->surname,
            $this->editModel->birthdate,
            $this->editModel->email,
            $this->editModel->sex,
            $this->editModel->patronymic,
            1
        );

        $this->participantRepository->save($part);
    }

    private function changePersonalData()
    {
        $pd2 = $this->personalDataParticipantRepository->getPersonalDataByParticipantId($this->id2);
        foreach ($pd2 as $data) {
            $this->personalDataParticipantRepository->delete($data);
        }

        $pd1 = $this->personalDataParticipantRepository->getPersonalDataByParticipantId($this->id1);
        foreach ($pd1 as $data) {
            /** @var PersonalDataParticipantWork $data */
            if (in_array($data->personal_data, $this->editModel->pd)) {
                $data->setStatus(PersonalDataParticipantWork::STATUS_RESTRICT);
            }
            else {
                $data->setStatus(PersonalDataParticipantWork::STATUS_FREE);
            }
            $this->personalDataParticipantRepository->save($data);
        }
    }
}