<?php

namespace frontend\forms\training_group;

use common\events\EventTrait;
use common\helpers\DateFormatter;
use common\helpers\html\HtmlBuilder;
use common\Model;
use common\repositories\educational\GroupProjectThemesRepository;
use common\repositories\educational\TrainingGroupRepository;
use frontend\models\work\educational\training_group\GroupProjectThemesWork;
use frontend\models\work\educational\training_group\TrainingGroupExpertWork;
use frontend\models\work\educational\training_group\TrainingGroupWork;
use frontend\models\work\ProjectThemeWork;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

class PitchGroupForm extends Model
{
    use EventTrait;

    private TrainingGroupRepository $groupRepository;
    private GroupProjectThemesRepository $groupProjectRepository;

    public TrainingGroupWork $entity;
    public $id;
    public $number;
    public $experts;
    public $prevExperts;

    public $themes;
    public $themesTable;
    public $prevThemes;
    public $protectionDate;
    public $themeIds;

    public function __construct(
        $id = -1,
        TrainingGroupRepository $groupRepository = null,
        GroupProjectThemesRepository $groupProjectRepository = null,
        $config = []
    )
    {
        parent::__construct($config);
        if (is_null($groupRepository)) {
            $groupRepository = Yii::createObject(TrainingGroupRepository::class);
        }

        if (is_null($groupProjectRepository)) {
            $groupProjectRepository = Yii::createObject(GroupProjectThemesRepository::class);
        }

        $this->groupRepository = $groupRepository;
        $this->groupProjectRepository = $groupProjectRepository;

        if ($id != -1) {
            $this->id = $id;
            $this->entity = $this->groupRepository->get($id);
            $this->number = $this->entity->number;
            $this->protectionDate = $this->entity->protection_date;
            $this->experts = $this->groupRepository->getExperts($id) ?: [new TrainingGroupExpertWork];
            $this->prevExperts = $this->groupRepository->getExperts($id) ?: [new TrainingGroupExpertWork];
            $this->prevThemes = $this->groupProjectRepository->getProjectThemesFromGroup($id) ?: [new GroupProjectThemesWork];
        }
        else {
            $this->prevExperts = [];
            $this->prevThemes = [];
        }

        $this->themes = /*$this->groupRepository->getThemes($id) ?: */[new ProjectThemeWork];
        $this->createThemesTable();
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            [['protectionDate', 'themes'], 'safe']
        ]);
    }

    public function createThemesTable()
    {
        $this->themesTable = HtmlBuilder::createTableWithActionButtons(
            [
                array_merge(['Тема'], ArrayHelper::getColumn($this->prevThemes, 'projectThemeWork.name')),
                array_merge(['Тип проекта'], array_map(function ($value) {
                    return Yii::$app->projectType->get($value);
                }, ArrayHelper::getColumn($this->prevThemes, 'projectThemeWork.project_type'))),
                array_merge(['Подтверждена'], array_map(function ($value) {
                    return $value ? 'Да' : 'Нет';
                }, ArrayHelper::getColumn($this->prevThemes, 'confirm')))
            ],
            [
                HtmlBuilder::createButtonsArray(
                    'Удалить',
                    Url::to('delete-theme'),
                    [
                        'groupId' => array_fill(0, count($this->prevThemes), $this->id),
                        'entityId' => ArrayHelper::getColumn($this->prevThemes, 'id')
                    ]
                )
            ]
        );
    }

    public function beforeValidate()
    {
        $this->protectionDate = DateFormatter::format($this->protectionDate, DateFormatter::dmY_dot, DateFormatter::Ymd_dash);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function save()
    {
        $this->entity->setProtectionDate($this->protectionDate);
        $this->groupRepository->save($this->entity);
    }
}