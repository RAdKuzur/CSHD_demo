<?php

namespace frontend\forms\journal;

use common\helpers\files\FilePaths;
use common\helpers\html\HtmlBuilder;
use common\helpers\StringFormatter;
use common\Model;
use common\models\scaffold\TrainingGroupParticipant;
use common\repositories\educational\GroupProjectThemesRepository;
use common\repositories\educational\TrainingGroupLessonRepository;
use common\repositories\educational\TrainingGroupParticipantRepository;
use common\repositories\educational\TrainingGroupRepository;
use common\repositories\educational\VisitRepository;
use DomainException;
use frontend\models\work\dictionaries\ForeignEventParticipantsWork;
use frontend\models\work\dictionaries\PersonInterface;
use frontend\models\work\educational\journal\ParticipantLessons;
use frontend\models\work\educational\journal\VisitLesson;
use frontend\models\work\educational\journal\VisitWork;
use frontend\models\work\educational\training_group\GroupProjectThemesWork;
use frontend\models\work\educational\training_group\TrainingGroupParticipantWork;
use frontend\models\work\educational\training_group\TrainingGroupWork;
use Yii;
use yii\helpers\Url;

/**
 * @property TrainingGroupWork $trainingGroupWork
 */

class JournalForm extends Model
{
    /** @var VisitWork[] $visits */
    public array $visits;
    public $groupId;
    public $trainingGroup;

    /** @var ParticipantLessons[] $participantLessons */
    public array $participantLessons = [];

    /** @var GroupProjectThemesWork[] $availableThemes */
    public array $availableThemes;

    public function rules()
    {
        return [
            ['participantLessons', 'safe']
        ];
    }

    public function __construct(
        int $groupId = null,
        $config = []
    )
    {
        parent::__construct($config);
        if (!is_null($groupId)) {
            $this->groupId = $groupId;
            $this->trainingGroup = (Yii::createObject(TrainingGroupRepository::class))->get($this->groupId);
            $this->visits = (Yii::createObject(VisitRepository::class))->getByTrainingGroup($this->groupId);
            $this->availableThemes = (Yii::createObject(GroupProjectThemesRepository::class))->getProjectThemesFromGroup($this->groupId);

            foreach ($this->visits as $visit) {
                /** @var VisitWork $visit */
                $lessons = VisitLesson::fromString($visit->lessons, Yii::createObject(TrainingGroupLessonRepository::class));
                $this->participantLessons[] = new ParticipantLessons(
                    $visit->training_group_participant_id,
                    $lessons,
                    $visit->trainingGroupParticipantWork->group_project_themes_id,
                    $visit->trainingGroupParticipantWork->points,
                    $visit->trainingGroupParticipantWork->success
                );
            }
        }

        foreach ($this->participantLessons as $participantLesson) {
            $participantLesson->sortLessons();
        }
    }

    public function load($data, $formName = null)
    {
        // Дозагружаем VisitLesson и доп данные для ParticipantLessons вручную, ActiveRecord не справляется сам
        $newParticipantLessons = [];
        $visitLessons = $data["VisitLesson"];
        $participantData = $data["ParticipantLessons"];

        if (is_array($visitLessons) && is_array($participantData)) {
            if (count($visitLessons) !== count($participantData)) {
                throw new DomainException('Техническая ошибка сервера. Закройте страницу и попробуйте еще раз');
            }

            foreach ($visitLessons as $index => $visitLesson) {
                $lessonArray = [];
                foreach ($visitLesson as $lesson) {
                    $lessonArray[] = new VisitLesson(
                        $lesson["lessonId"],
                        $lesson["status"],
                        (Yii::createObject(TrainingGroupLessonRepository::class))->get($lesson["lessonId"])
                    );
                }

                $groupProjectThemeId = !empty($participantData[$index]['groupProjectThemeId']) ?
                    (int)$participantData[$index]['groupProjectThemeId'] :
                    null;
                $newParticipantLessons[] = new ParticipantLessons(
                    $index,
                    $lessonArray,
                    $groupProjectThemeId,
                    (int)$participantData[$index]['points'],
                    (int)$participantData[$index]['successFinishing']
                );
            }
            $this->participantLessons = $newParticipantLessons;
        }
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /**
     * Возвращает номер учебной группы
     * @return mixed|string|null
     */
    public function getTrainingGroupNumber()
    {
        return $this->trainingGroup ? $this->trainingGroup->number : '';
    }

    /**
     * Иконка архивного статуса
     * @return string
     */
    public function getRawArchiveGroup()
    {
        return $this->trainingGroup ? $this->trainingGroup->getRawArchive() : '';
    }

    /**
     * Список занятий в расписании
     * @return array|int
     */
    public function getDateLessons()
    {
        if (count($this->participantLessons) > 0) {
            return $this->participantLessons[0]->getLessonsDate();
        }
        return 1;
    }

    /**
     * Количество занятий
     * @return int
     */
    public function getLessonsCount()
    {
        if (count($this->participantLessons) > 0) {
            return $this->participantLessons[0]->getLessonsCount();
        }
        return 1;
    }

    /**
     * Красивое отображение успешного завершения
     * @param int $status
     * @return string
     */
    public function getPrettySuccessFinishing(int $status)
    {
        if ($status == 1) {
            return HtmlBuilder::paintSVG(FilePaths::SVG_CHECK, HtmlBuilder::SVG_PRIMARY_COLOR);
        }
        return HtmlBuilder::paintSVG(FilePaths::SVG_CROSS, HtmlBuilder::SVG_CRITICAL_COLOR);
    }

    public function getParticipantIcons(ForeignEventParticipantsWork $participant)
    {
        /** @var TrainingGroupParticipantWork $trGrPart */
        $trGrPart = (Yii::createObject(TrainingGroupParticipantRepository::class))->getByParticipantIdAndGroupId($participant->id, $this->groupId);
        $className = $trGrPart->isBlockedJournal() ? 'status-block' : 'status-active';
        return '<div class="'.$className.'">'.$trGrPart->getRawStatus().'</div>';
    }

    /**
     * Красивое отображение учащихся
     * @param ForeignEventParticipantsWork $participant
     * @param int|null $formatter
     * @return string
     */
    public function getPrettyParticipant(ForeignEventParticipantsWork $participant, int $formatter = null)
    {
        if ($formatter == StringFormatter::FORMAT_LINK) {
            $partContent = StringFormatter::stringAsLink($participant->getFIO(PersonInterface::FIO_SURNAME_INITIALS),
                Url::to([Yii::$app->frontUrls::PARTICIPANT_VIEW, 'id' => $participant->id]));
        } else {
            $partContent = $participant->getFIO(PersonInterface::FIO_SURNAME_INITIALS);
        }

        return HtmlBuilder::createTooltip(
                $partContent,
                $participant->getFIO(PersonInterface::FIO_FULL)
            );
    }

    /**
     * Возвращает информацию о необходимости отображать данные по проектам
     * @return mixed
     */
    public function isProjectCertificate()
    {
        return $this->trainingGroup->trainingProgramWork->isProjectCertificate();
    }

    /**
     * Возвращает информацию о необходимости отображаеть данные по контрольной
     * @return mixed
     */
    public function isControlWorkCertificate()
    {
        return $this->trainingGroup->trainingProgramWork->isControlWorkCertificate();
    }

    /**
     * Определяем количество ячеек которые необходимо объединить
     * @return int
     */
    public function getColspanControl()
    {
        return 1 + (int)$this->isProjectCertificate() + (int)$this->isControlWorkCertificate();
    }
}