<?php

namespace frontend\models\work\order;

use frontend\models\work\educational\training_group\OrderTrainingGroupParticipantWork;
use frontend\services\order\OrderMainService;
use common\components\dictionaries\base\NomenclatureDictionary;
use common\events\EventTrait;
use common\helpers\DateFormatter;
use common\repositories\order\OrderMainRepository;
use frontend\models\work\general\PeopleWork;
use Yii;
/**
 * @property PeopleWork $correspondentWork
 * @property PeopleWork $creatorWork
 * @property PeopleWork $lastUpdateWork
 * @property PeopleWork $executorWork
 * @property PeopleWork $bringWork
 */
class OrderTrainingWork extends DocumentOrderWork
{
    use EventTrait;
    public $responsible_id;
    public $branch;

    /**
     * @return string
     */
    public function getFullName()
    {
        return "{$this->order_number} {$this->order_name}";
    }

    public function generateOrderNumber()
    {
        $formNumber = $this->order_number;
        $model_date = DateFormatter::format($this->order_date, DateFormatter::dmY_dot, DateFormatter::Ymd_dash);
        $year = substr(DateFormatter::format($model_date, DateFormatter::dmY_dot, DateFormatter::Ymd_dash), 0, 4);
        $array_number = [];
        $index = 1;
        $upItem = NULL;
        $equalItem = [];
        $downItem = NULL;
        $isPostfix = NULL;
        $records = Yii::createObject(OrderMainRepository::class)->getEqualPrefix($formNumber);
        $array_number = Yii::createObject(OrderMainService::class)->createArrayNumber($records, $array_number);
        $numberPostfix = Yii::createObject(OrderMainService::class)
            ->createOrderNumber($array_number, $downItem, $equalItem, $upItem, $isPostfix, $index, $formNumber, $model_date);
        $this->order_number = $numberPostfix['number'];
        $this->order_postfix = $numberPostfix['postfix'];
    }

    public function setBranch($branch)
    {
        $this->branch = $branch;
    }

    public function getOrderType()
    {
        $number = $this->order_number;
        $parts = explode("/", $number);
        return (new \common\components\dictionaries\base\NomenclatureDictionary)->get($parts[0]);
    }

    public function getStatus()
    {
        $number = $this->order_number;
        $parts = explode("/", $number);
        return NomenclatureDictionary::getStatus($parts[0]);
    }

    public function getNomenclature()
    {
        $number = $this->order_number;
        $parts = explode("/", $number);
        return $parts[0];
    }

    public function beforeValidate()
    {
        $this->type = self::ORDER_TRAINING;
        $this->order_date = DateFormatter::format($this->order_date, DateFormatter::dmY_dot, DateFormatter::Ymd_dash);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrderTrainingGroupParticipantWork()
    {
        return $this->hasMany(OrderTrainingGroupParticipantWork::class, ['order_id' => 'id']);
    }
}